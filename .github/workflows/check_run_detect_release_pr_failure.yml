name: detect critical check failures

on:
  status: {}

jobs:
  investigate_event:
    runs-on: ubuntu-latest
    if: >-
      (github.event.state == 'error' || github.event.state == 'failure')
      && github.event.description != 'Your CircleCI tests were canceled'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2.4.0
      - name: investigate and notify
        env:
          STATE: ${{ github.event.state }}
          DESCRIPTION: ${{ github.event.description }}
          GITHUB_TOKEN: ${{ secrets.HRA_GITHUB_TOKEN }}
        run: |
          set -x

          echo "$STATE": "$DESCRIPTION"
          jq < ${GITHUB_EVENT_PATH}

          # ignore this check if the commit is already on develop
          if [[ "true" == $(jq --raw-output '.branches | map(select(.name  == "develop") | .name) | length != 0' < ${GITHUB_EVENT_PATH}) ]]; then
            exit 0
          fi

          export pr_base="$(jq --raw-output '.repository.default_branch' < ${GITHUB_EVENT_PATH})"

          # try to find the branch in the 'branches' array.
          # this array is not populated for status updates that came in from release CI runs.
          # this is because the commit is the result of merging the PR with the base branch
          export pr_head="$(jq --raw-output '.branches | map(select(.name | startswith("release-")) | .name) | .[0]' < ${GITHUB_EVENT_PATH})"

          # try to use the most recent parent to identify the branch
          if [[ "${pr_head}" == null ]]; then
            parent_commit=$(jq --raw-output '.commit.parents[-1].sha' < ${GITHUB_EVENT_PATH})
            git fetch --all
            export pr_head=$(git branch -a --contains ${parent_commit} --format '%(refname:short)' | sed 's/origin\///' | uniq | jq --raw-output --raw-input --slurp 'split("\n") | .[0:-1] | map(select(startswith("release-")))[0]')
          fi

          if [[ "${pr_head}" == null ]]; then
            echo failing commit is not part of a release pr, exiting.
            exit 0
          fi

          export target_url="$(jq --raw-output '.target_url' < ${GITHUB_EVENT_PATH})"
          export pr_number="$(gh pr list --state open --json number --jq '.[0].number' --base ${pr_base} --head ${pr_head})"

          cat <<EOF | echo gh pr comment ${pr_number} --body-file -
          _this PR was determined to be part of a release due to its branch prefix 'release-'.
          assigning the core-dev team to take a look here._

          ---
          ${DESCRIPTION}

          details: ${target_url}
          EOF

          echo gh pr edit ${pr_number} --add-assignee "holochain/core-dev"
